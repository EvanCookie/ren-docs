import{_ as e,c as s,a5 as a,o as t}from"./chunks/framework.DeASWWRe.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"git/gitee.md","filePath":"git/gitee.md","lastUpdated":1723555478000}'),l={name:"git/gitee.md"};function n(h,i,p,o,d,r){return t(),s("div",null,i[0]||(i[0]=[a(`<h2 id="gitee-简介" tabindex="-1">Gitee 简介 <a class="header-anchor" href="#gitee-简介" aria-label="Permalink to &quot;Gitee 简介&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/giteeLogo.png" alt="logo" loading="lazy"></p><p><a href="https://gitee.com/" target="_blank" rel="noreferrer">Gitee</a> 是一个 Git 仓库管理网站，可以创建远程中心仓库，为多人合作开发提供便利，与 Gitee 类似的网站还有很多，例如：<a href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a>、<a href="https://about.gitlab.com/" target="_blank" rel="noreferrer">GitLab</a> 等等，有了 Gitee 的基础后 GitHub 和 GitLab 也同样能很快上手。</p><h2 id="_1-新建远程仓库" tabindex="-1">1. 新建远程仓库 <a class="header-anchor" href="#_1-新建远程仓库" aria-label="Permalink to &quot;1. 新建远程仓库&quot;">​</a></h2><p>第一步：打开gitee官网，点击 <code>+</code><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/new.png" alt="img" loading="lazy"></p><p>第二步：编辑仓库信息，点击创建 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/new-01.png" alt="img" loading="lazy"></p><p>第二步：创建完成 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/new-02.png" alt="img" loading="lazy"></p><h2 id="_2-关联远程库" tabindex="-1">2. 关联远程库 <a class="header-anchor" href="#_2-关联远程库" aria-label="Permalink to &quot;2. 关联远程库&quot;">​</a></h2><p>第一步：维护好本地仓库（所有文件均接受版本控制）。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;注释&#39;</span></span></code></pre></div><p>第二步：注册并激活 Gitee 账号。</p><p>第三步：创建远程仓库，并获取仓库的地址。</p><p>第四步：配置本地仓库关联远程仓库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://xxxx/xxxx/xxxxx.git</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>origin</code> 为仓库的别名，可更改</li><li>查看当前仓库关联远程仓库地址：<code>git remote -v</code></li><li>更改远程仓库的 URL：<code>git remote set-url origin 新的仓库URL</code></li><li>删除与远程仓库的关联：<code>git remote remove origin</code></li></ul></div><h2 id="_3-推送代码" tabindex="-1">3. 推送代码 <a class="header-anchor" href="#_3-推送代码" aria-label="Permalink to &quot;3. 推送代码&quot;">​</a></h2><p>将本地仓库的 master 分支推送到远程仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>可能会弹窗提示输入密码 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/password.png" alt="img" loading="lazy"></li><li>push 表示推送。</li><li>-u（upstream） 表示关联，加上 -u 以后，后续提交时可以直接使用 git push 即可。</li><li>origin 远端仓库的别名。</li><li>master 本地仓库的分支名称。</li></ul></div><h2 id="_4-拉取代码" tabindex="-1">4. 拉取代码 <a class="header-anchor" href="#_4-拉取代码" aria-label="Permalink to &quot;4. 拉取代码&quot;">​</a></h2><p>当本地仓库想获得远程仓库的最新修改时，可以使用<code>git pull</code>命令拉取远端代码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>git pull 会将远端代码自动执行合并操作，即：将远程分支的修改合并到本地当前分支。</p></div><h2 id="_5-关于冲突" tabindex="-1">5. 关于冲突 <a class="header-anchor" href="#_5-关于冲突" aria-label="Permalink to &quot;5. 关于冲突&quot;">​</a></h2><ul><li>合并/变基引起的冲突：两个分支在同一文件的同一位置都有修改时，合并或变基时会引起冲突。</li><li>拉取引起的冲突：不同的开发者修改了同一文件的同一位置都有修改时，拉取代码会有冲突。</li></ul><h2 id="_6-克隆远程库" tabindex="-1">6. 克隆远程库 <a class="header-anchor" href="#_6-克隆远程库" aria-label="Permalink to &quot;6. 克隆远程库&quot;">​</a></h2><p>获取一个远程仓库的地址，随后执行克隆命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://xxxx/xxxx/xxxx.git</span></span></code></pre></div><p>使用 <code>--depth 1</code> 参数可以克隆仓库的最近一次提交，这样可以减少克隆所需的时间和空间。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://xxxx/xxxx/xxxx.git</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>克隆下来的仓库，使用 <code>git branch</code> 命令，只能看到默认分支，其他分支其实也已经克隆下来了，但不出现在<code>git branch</code>列表中，需要使用<code>git branch -r</code>或 <code>gir branch -a</code>来查看。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/clone01.png" alt="img" loading="lazy"></p><ul><li>需要切换到其他分支时，可以直接<code>git checkout -b xxx origin/xxx</code>来进行切换，当然对于 1.7.0 以后得 git 版本，也可以使用简短的命令：<code>git checkout xxx</code>来切换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/clone02.png" alt="img" loading="lazy"></p></div><h2 id="_7-ssh-协议" tabindex="-1">7. SSH 协议 <a class="header-anchor" href="#_7-ssh-协议" aria-label="Permalink to &quot;7. SSH 协议&quot;">​</a></h2><h3 id="_7-1-公钥加密" tabindex="-1">7.1. 公钥加密 <a class="header-anchor" href="#_7-1-公钥加密" aria-label="Permalink to &quot;7.1. 公钥加密&quot;">​</a></h3><p>我们来举个例子，你在A城市，想给你在B城市的朋友张三发送一个机密的信件，由于工作原因，你无法亲自去送，同时你也担心快递不能严格的保密。这时你就可以使用公钥加密技术，大致思路是：</p><ul><li>张三先给你一个特制的保险箱（公钥），这个保险箱仅有一把 能打开它的钥匙，钥匙在张三那里。</li><li>你将信件放入保险箱并锁上，随后交给快递员，快递员携带着这个箱子去送货，但无法打开它。</li><li>快递到达张三手里的钥匙（私钥）打开保险箱，取出信件。</li></ul><p><strong>总结：</strong></p><ol><li>通过这种方式，即使在不完全可信的通道上，你的信件也能安全到达目的地，没有人能够在途中打开保险箱并窃取它。这就是公钥加密的工作原理。</li><li>使用公钥（所有人可见的保险箱）来加密信息，而只有对应的私钥（只有接收者持有的钥匙）能解密信息。这种方法不仅保护了数据的安全性，还确保了数据传输的私密性和完整性。</li></ol><h3 id="_7-2-ssh-简介" tabindex="-1">7.2. SSH 简介 <a class="header-anchor" href="#_7-2-ssh-简介" aria-label="Permalink to &quot;7.2. SSH 简介&quot;">​</a></h3><p>SSH（Secure Shell）是一种网络协议，SSH利用公钥加密技术提供了一种安全的方法，来管理和操作远程计算机，保护数据的安全和隐私</p><h3 id="_7-3-gitee-使用-ssh" tabindex="-1">7.3. Gitee 使用 ssh <a class="header-anchor" href="#_7-3-gitee-使用-ssh" aria-label="Permalink to &quot;7.3. Gitee 使用 ssh&quot;">​</a></h3><p><a href="https://help.gitee.com/base/account/SSH%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">Gitee SSH 公钥设置</a></p><p><a href="https://help.gitee.com/base/account/SSH%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">Gitee SSH Key 配置管理</a></p><details class="details custom-block"><summary>第一步：生成 SSH 公钥</summary><ol><li>使用以下命令生成公钥</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Gitee SSH Key&quot;</span></span></code></pre></div><ol start="2"><li>提示输入公钥的保存地址，如无需修改，直接回车即可： <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh01-1.png" alt="img" loading="lazy"></li><li>提示是否为私钥建立密码，如需要直接输入，不需要直接回车： <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh01-2.png" alt="img" loading="lazy"></li><li>提示确认密码，输入和上一步相同的密码即可，若无密码直接回车： <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh01-3.png" alt="img" loading="lazy"></li><li>提示生成完毕 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh01-4.png" alt="img" loading="lazy"></li></ol></details><details class="details custom-block"><summary>第二步：在Gitee上配置公钥</summary><ol><li>输入<code>ls ~/.ssh/</code>命令查看生成的公钥与私钥 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh02-1.png" alt="img" loading="lazy"></li></ol><ul><li>私钥文件 <code>id_ed25519</code></li><li>公钥文件 <code>id_ed25519.pub</code></li></ul><ol start="2"><li>使用<code>cat ~/.ssh/id_ed25519.pub</code>查看公钥 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh02-2.png" alt="img" loading="lazy"></li><li>复制公钥，添加到Gitee设置中 <img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh02-3.png" alt="img" loading="lazy"></li></ol></details><details class="details custom-block"><summary>第三步：本地库与远端交互</summary><ol><li>尝试使用 ssh 方式克隆仓库</li></ol><p><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh03-1.png" alt="img" loading="lazy"></p><ol start="2"><li>第一次操作，此处会有提示，输入 yes 即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/EvanCookie/pictureBed@master/git/gitee/ssh03-2.png" alt="img" loading="lazy"></p><ol start="3"><li>克隆成功 （后续的拉取，推送，可以直接尽心，无序任何的密码输入）</li></ol></details>`,45)]))}const k=e(l,[["render",n]]);export{c as __pageData,k as default};
